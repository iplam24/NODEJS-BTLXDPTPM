const upload = require('../middleware/upload');
const {checkUser,createUser,getUserUpDate,updateUser,deleteUser,getAllUser} = require('../models/userDAO');
const {addCarDB,getAllCar} = require('../models/productDAO');
const getAdmin =(req,res)=>{
    res.render('admin/admin')
}
//L·∫•y v·ªÅ to√†n b·ªô user v√† fill d·ªØ li·ªáu v√†o
const getAccount=async(req,res)=>{
    try {
        let users = await getAllUser();
        res.render("admin/account", { listUser: users, message: null });
    } catch (err) {
        res.send("‚ùå L·ªói l·∫•y danh s√°ch t√†i kho·∫£n!");
    }
}

//th√™m user d∆∞·ªõi quy·ªÅn admin
const postCreateNewUserAdmin = async(req,res)=>{
    let { username, password, repassword, myname, email, phone, address,quyen } = req.body;
    let role = 2; // M·∫∑c ƒë·ªãnh kh√°ch h√†ng
    if (quyen === "nhanvien") {
        role = 1; // Nh√¢n vi√™n
    }
    // Ki·ªÉm tra d·ªØ li·ªáu nh·∫≠p v√†o
    if (!username || !password || !repassword) {
        return res.send(`<script>
            alert("Vui L√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin t√†i kho·∫£n.");
            window.location.href = "/admin/account"; 
        </script>`);
    }

    if (password !== repassword) {
        return res.send(`<script>
            alert("M·∫≠t kh·∫©u kh√¥ng tr√πng kh·ªõp, vui l√≤ng th·ª≠ l·∫°i!.");
            window.location.href = "/admin/account"; 
        </script>`);
    }

    try {
        // Ki·ªÉm tra username ƒë√£ t·ªìn t·∫°i ch∆∞a
        let userExists = await checkUser(username);
        if (userExists) {
            return res.send(`<script>
                alert("T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i, vui l√≤ng th·ª≠ t√™n t√†i kho·∫£n kh√°c");
                window.location.href = "/admin/account"; 
            </script>`);
        }
         // T·∫°o ng∆∞·ªùi d√πng m·ªõi
         await createUser(username, password, myname, email, phone, address,role);
         console.log("‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng ng∆∞·ªùi d√πng m·ªõi:", username);
 
         return res.send(`<script>
             alert("Th√™m t√†i kho·∫£n th√†nh c√¥ng!");
             window.location.href = "/admin/account"; 
         </script>`);
    }catch (err) {
    console.error("‚ö† L·ªói h·ªá th·ªëng:", err);
    return res.send(`<script>
        alert("L·ªói h·ªá th·ªëng! Vui l√≤ng th·ª≠ l·∫°i.");
        window.location.href = "/admin/account"; 
    </script>`);
}
}
//l·∫•y v·ªÅ  d·ªØ li·ªáu c·ªßa user 
const getUpDateUser=async(req,res)=>{
    const userName = req.params.username;
    let result = await getUserUpDate(userName);
    res.render("admin/suaTK", { userEdit: result });
}

const postUpDateUserAdmin=async(req,res)=>{
    let { username, password, myname, email, phone, address,quyen } = req.body;
    let role = 2; // M·∫∑c ƒë·ªãnh kh√°ch h√†ng
    if (quyen === "nhanvien") {
        role = 1; // Nh√¢n vi√™n
    }
    await updateUser(username, password, myname, email, phone, address,role);
    console.log(`B·∫°n v·ª´a th·ª±c hi·ªán s·ª≠a d·ªØ li·ªáu c·ªßa user ${username}`);
    return res.send(`<script>
        alert("S·ª≠a t√†i kho·∫£n th√†nh c√¥ng!");
        window.location.href = "/admin/account"; 
    </script>`);
}
const postDeleteUser=async(req,res)=>{
    const userName = req.params.username;
    try {
        await deleteUser(userName);
        
        console.log(`Xo√° th√†nh c√¥ng user ${userName}`);
        return res.send(`<script>
            alert("‚úÖX√≥a t√†i kho·∫£n th√†nh c√¥ng!");
            window.location.href = "/admin/account"; 
        </script>`);
    } catch (error) {
        res.status(500).send("‚ùå L·ªói khi x√≥a t√†i kho·∫£n!");
    }
}

const getCar =async(req,res)=>{
    try {
        const cars = await getAllCar();
        res.render("admin/cars", { cars });  // üü¢ Truy·ªÅn d·ªØ li·ªáu xe v√†o view
    } catch (error) {
        console.error("‚ùå L·ªói khi hi·ªÉn th·ªã danh s√°ch xe:", error);
        res.status(500).send("L·ªói khi hi·ªÉn th·ªã danh s√°ch xe");
    }
}

const addCar = async (req, res) => {
    upload(req, res, async (err) => {
        if (err) {
            return res.status(500).json({ message: "L·ªói upload ·∫£nh!", error: err.message });
        }

        // üü¢ Ki·ªÉm tra `req.files`
        if (!req.files || !Array.isArray(req.files) || req.files.length === 0) {
            return res.send(`<script>
                alert("Kh√¥ng c√≥ ·∫£nh n√†o ƒë∆∞·ª£c t·∫£i l√™n!");
                window.location.href = "/admin/car"; 
            </script>`);
        }

        const { carID, model, version, price, color, engine, capkw, torquenm, accel, rangekm, fastcharge, drivertrain } = req.body;
        let dongco;
        if (engine === "xang") {
            dongco = 1; 
        }else if(engine==="dien"){
            dongco=2;
        }else{
            dongco=3
        }
        // üü¢ Ch·ªânh s·ª≠a ƒë∆∞·ªùng d·∫´n ·∫£nh (ch·ªâ gi·ªØ `/upload/...`)
        let imagePaths;
        try {
            imagePaths = req.files.map(file => {
                let relativePath = file.path.replace(/\\/g, "/"); // Chuy·ªÉn d·∫•u `\` th√†nh `/`
                relativePath = relativePath.replace(/^.*\/public\//, "/"); // B·ªè ƒëi ph·∫ßn `/public/`
                return relativePath; // K·∫øt qu·∫£ ch·ªâ c√≤n `/upload/...`
            });

            if (!Array.isArray(imagePaths) || imagePaths.length === 0) {
                throw new Error("imagePaths kh√¥ng ph·∫£i l√† m·∫£ng h·ª£p l·ªá!");
            }
        } catch (error) {
            console.error("‚ùå L·ªói khi x·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n ·∫£nh:", error);
            return res.status(500).json({ message: "L·ªói x·ª≠ l√Ω ·∫£nh!", error: error.message });
        }

        console.log("‚úÖ ·∫¢nh ƒë∆∞·ª£c l∆∞u v√†o CSDL v·ªõi ƒë∆∞·ªùng d·∫´n:", imagePaths);

        try {
            await addCarDB(carID, model, version, price, color, dongco, capkw, torquenm, accel, rangekm, fastcharge, drivertrain, imagePaths);
            return res.send(`<script>
                alert("Th√™m xe th√†nh c√¥ng!");
                window.location.href = "/admin/car"; 
            </script>`);
        } catch (dbError) {
            console.error("‚ùå L·ªói khi l∆∞u v√†o database:", dbError);
            return res.status(500).json({ message: "L·ªói khi l∆∞u d·ªØ li·ªáu v√†o database!", error: dbError.message });
        }
    });
};





module.exports ={getAdmin,getAccount,postCreateNewUserAdmin,getUpDateUser,postUpDateUserAdmin,postDeleteUser,getCar,addCar}